---

# Dataprep Microservice with Cosmos DB

## ðŸš€1. Start Microservice with Pythonï¼ˆOption 1ï¼‰

### 1.1 Install Requirements

```bash
pip install -r requirements.txt
```

### 1.2 Setup Environment Variables

```bash
export COSMOS_CONNECTION_STRING=${your_cosmos_connection_string}
export DATABASE_NAME=${your_database_name}
export CONTAINER_NAME=${your_container_name}
```

### 1.3 Start Cosmos DB

Please refer to this [readme](../../../vectorstores/cosmosdb/README.md) to set up and run Cosmos DB.

### 1.4 Start Document Preparation Microservice for Cosmos DB with Python Script

Start the document preparation microservice for Cosmos DB with the following command.

```bash
python prepare_doc_cosmos.py
```

## ðŸš€2. Start Microservice with Docker (Option 2)

### 2.1 Start Cosmos DB

Please refer to this [readme](../../../vectorstores/cosmosdb/README.md) for setting up and running Cosmos DB.

### 2.2 Setup Environment Variables

```bash
export COSMOS_CONNECTION_STRING=${your_cosmos_connection_string}
export DATABASE_NAME=${your_database_name}
export CONTAINER_NAME=${your_container_name}
```

### 2.3 Build Docker Image

```bash
cd GenAIComps
docker build -t opea/dataprep-cosmosdb:latest --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy -f comps/dataprep/cosmosdb/langchain/Dockerfile .
```

### 2.4 Run Docker with CLI (Option A)

```bash
docker run  --name="dataprep-cosmosdb" -p 6011:6011 --ipc=host -e http_proxy=$http_proxy -e https_proxy=$https_proxy -e COSMOS_CONNECTION_STRING=$COSMOS_CONNECTION_STRING -e DATABASE_NAME=$DATABASE_NAME -e CONTAINER_NAME=$CONTAINER_NAME -e TEI_ENDPOINT=$TEI_ENDPOINT opea/dataprep-cosmosdb:latest
```

### 2.5 Run with Docker Compose (Option B)

```bash
cd comps/dataprep/cosmosdb/langchain
docker compose -f docker-compose-dataprep-cosmosdb.yaml up -d
```

## ðŸš€3. Consume Microservice

### 3.1 Consume Upload API

Once the document preparation microservice for Cosmos DB is started, the user can invoke the microservice to convert the document to an embedding and save it to the database with the following command:

```bash
curl -X POST \
    -H "Content-Type: application/json" \
    -d '{"path":"/path/to/document"}' \
    http://localhost:6011/v1/dataprep
```

### 3.2 Consume get_file API

To get uploaded file structures, use the following command:

```bash
curl -X POST \
    -H "Content-Type: application/json" \
    http://localhost:6011/v1/dataprep/get_file
```

### 4.3 Consume delete_file API

To delete an uploaded file or link, use the following command.

The `file_path` here should be the `id` received from the `/v1/dataprep/get_file` API.

```bash
# delete link
curl -X POST \
    -H "Content-Type: application/json" \
    -d '{"file_path": "https://www.ces.tech/.txt"}' \
    http://localhost:6011/v1/dataprep/delete_file

# delete file
curl -X POST \
    -H "Content-Type: application/json" \
    -d '{"file_path": "uploaded_file_1.txt"}' \
    http://localhost:6011/v1/dataprep/delete_file

# delete all files and links
curl -X POST \
    -H "Content-Type: application/json" \
    -d '{"file_path": "all"}' \
    http://localhost:6011/v1/dataprep/delete_file
```

--- 
